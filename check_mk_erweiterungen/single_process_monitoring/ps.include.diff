--- /omd/sites/test/share/check_mk/checks/ps.include    2015-07-16 14:12:33.000000000 +0200
+++ /omd/sites/test/local/share/check_mk/checks/ps.include      2015-07-24 13:48:42.511201105 +0200
@@ -206,6 +206,12 @@
 #   "user" : "foo",
 #   "levels" : (1, 1, 99999, 99999)
 # }
+
+# Params Extension for single Process memory and cpu
+# {
+#   "singleproc" : True,
+# }
+
 def parse_ps_time(text):
     if "-" in text:
         tokens = text.split("-")
@@ -235,6 +241,7 @@
         }
         if user != None:
             params["user"] = user
+        params["singleproc"] = False
     elif "okmin" in params or "warnmin" in params or "okmax" in params or "warnmax" in params:
         params["levels"] = (
             params.get("warnmin", 1),
@@ -242,6 +249,7 @@
             params.get("okmax", 99999),
             params.get("warnmax", 99999),
         )
+        params["singleproc"] = False

     count = 0
     virtual_size   = 0
@@ -266,8 +274,14 @@
             if ps[0][0] == '(':
                 addinfo = ps[0][1:-1].split(",")
                 if len(addinfo) >= 4: # extended performance data: virtualsize, residentsize, %cpu
-                    virtual_size += int(addinfo[1])  # kB
-                    resident_size += int(addinfo[2]) # kB
+                    if params.get("singleproc") != True:
+                        virtual_size += int(addinfo[1])  # kB
+                        resident_size += int(addinfo[2]) # kB
+                    else:
+                        if virtual_size <= int(addinfo[1]):
+                            virtual_size = int(addinfo[1])
+                        if resident_size <= int(addinfo[2]):
+                            resident_size = int(addinfo[2])
                     if len(addinfo) >= 10: # even more data: processId, pagefile_usage, usermodetime, kernelmodetime, threadCount, openHandles
                         pid, pagefile_usage, user_c, kernel_c, handle_c = map(int, addinfo[4:9])
                         counter_wrapped = False
@@ -287,8 +301,15 @@

                         user_perc = user_per_sec / 100000.0 / cpu_cores
                         kernel_perc = kernel_per_sec / 100000.0 / cpu_cores
-                        percent_cpu += user_perc + kernel_perc
-                        handle_count += handle_c
+                        print user_perc + kernel_perc
+                        if params.get("singleproc") != True:
+                            percent_cpu += user_perc + kernel_perc
+                            handle_count += handle_c
+                        else:
+                            if percent_cpu <= user_perc + kernel_perc:
+                                percent_cpu = user_perc + kernel_perc
+                            if handle_count <= handle_c:
+                                handle_count = handle_c
                     else:
                         if ":" in addinfo[3]:
                             if '/' in addinfo[3]:
