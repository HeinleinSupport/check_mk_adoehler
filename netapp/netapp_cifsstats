#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
#		'CIFS_Total_Ops':		'.1.3.6.1.4.1.789.1.7.3.1.1.1.0',
#		'CIFS_Total_Calls':		'.1.3.6.1.4.1.789.1.7.3.1.1.2.0',
#		'CIFS_Bad_Calls':		'.1.3.6.1.4.1.789.1.7.3.1.1.3.0',
#		'CIFS_Get_Attrs':		'.1.3.6.1.4.1.789.1.7.3.1.1.4.0',
#		'CIFS_Reads':			'.1.3.6.1.4.1.789.1.7.3.1.1.5.0',
#		'CIFS_Writes':			'.1.3.6.1.4.1.789.1.7.3.1.1.6.0',
#		'CIFS_Locks':			'.1.3.6.1.4.1.789.1.7.3.1.1.7.0',
#		'CIFS_Opens':			'.1.3.6.1.4.1.789.1.7.3.1.1.8.0',
#		'CIFS_DirOps':			'.1.3.6.1.4.1.789.1.7.3.1.1.9.0',
#		'CIFS_Others':			'.1.3.6.1.4.1.789.1.7.3.1.1.10.0',

def check_netapp_cifsstats(item, params, info):
    this_time = time.time()
    cifsTotalOps, cifsTotalCalls, cifsBadCalls, \
    cifsGetAttrs, cifsReads, cifsWrites, \
    cifsLocks, cifsOpens, cifsDirOps, cifsOthers \
                = [ saveint(x) for x in info[0][:10] ]
    cifsTotalOps_timedif,  cifsTotalOps_per_sec  = get_counter("cifsstats.cifsTotalOps",  this_time, cifsTotalOps)
    cifsTotalCalls_timedif, cifsTotalCalls_per_sec = get_counter("cifsstats.cifsTotalCalls", this_time, cifsTotalCalls)
    cifsBadCalls_timedif,  cifsBadCalls_per_sec  = get_counter("cifsstats.cifsBadCalls",  this_time, cifsBadCalls)
    cifsGetAttrs_timedif, cifsGetAttrs_per_sec = get_counter("cifsstats.cifsGetAttrs", this_time, cifsGetAttrs)
    cifsReads_timedif,  cifsReads_per_sec  = get_counter("cifsstats.cifsReads",  this_time, cifsReads)
    cifsWrites_timedif, cifsWrites_per_sec = get_counter("cifsstats.cifsWrites", this_time, cifsWrites)
    cifsLocks_timedif,  cifsLocks_per_sec  = get_counter("cifsstats.cifsLocks",  this_time, cifsLocks)
    cifsOpens_timedif, cifsOpens_per_sec = get_counter("cifsstats.cifsOpens", this_time, cifsOpens)
    cifsDirOps_timedif,  cifsDirOps_per_sec  = get_counter("cifsstats.cifsDirOps",  this_time, cifsDirOps)
    cifsOthers_timedif, cifsOthers_per_sec = get_counter("cifsstats.cifsOthers", this_time, cifsOthers)
    infotext = "CIFS OK"
    perfdata = [("total_ops", cifsTotalOps_per_sec, 0, 0, 0, 0),
                ("total_calls", cifsTotalCalls_per_sec, 0, 0, 0, 0),
                ("bad_calls", cifsBadCalls_per_sec, 0, 0, 0, 0),
                ("get_attrs", cifsGetAttrs_per_sec, 0, 0, 0, 0),
                ("reads", cifsReads_per_sec, 0, 0, 0, 0),
                ("writes", cifsWrites_per_sec, 0, 0, 0, 0),
                ("locks", cifsLocks_per_sec, 0, 0, 0, 0),
                ("opens", cifsOpens_per_sec, 0, 0, 0, 0),
                ("dirops", cifsDirOps_per_sec, 0, 0, 0, 0),
                ("others", cifsOthers_per_sec, 0, 0, 0, 0),
    ]
    return (0, infotext, perfdata)

check_info["netapp_cifsstats"] = {
    "check_function"        : check_netapp_cifsstats,
    "inventory_function"    : lambda info: [(None, None)],
    "service_description"   : "CIFS Stats",
    "has_perfdata"          : True,
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.4.1.789.1.2.1.3.0"),
    "snmp_info"		    : ( ".1.3.6.1.4.1.789.1.7.3.1.1", [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"] ),
}
