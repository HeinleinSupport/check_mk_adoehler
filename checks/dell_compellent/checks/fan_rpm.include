#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

def check_fans_determine_levels(dlh, usr_warn, usr_crit, usr_warn_lower, usr_crit_lower,
                                       dev_warn, dev_crit, dev_warn_lower, dev_crit_lower):
    # min that deals correctly with None
    def minn(a, b):
        return min(a, b) or a or b

    # Ignore device's own levels
    if dlh == "usr":
        warn, crit, warn_lower, crit_lower = usr_warn, usr_crit, usr_warn_lower, usr_crit_lower

    # Only use device's levels, ignore yours
    elif dlh == "dev":
        warn, crit, warn_lower, crit_lower = dev_warn, dev_crit, dev_warn_lower, dev_crit_lower

    # The following four cases are all identical, if either *only* device levels or *only*
    # user levels exist (or no levels at all).

    # Use least critical of your and device's levels. If just one of both is defined,
    # take that. max deals correctly with None here. min does not work because None < int.
    # minn is a min that deals with None in the way we want here.
    elif dlh == "best":
        warn, crit = max(usr_warn, dev_warn), max(usr_crit, dev_crit)
        warn_lower, crit_lower = minn(usr_warn_lower, dev_warn_lower), minn(usr_crit_lower, dev_crit_lower)

    # Use most critical of your and device's levels
    elif dlh == "worst":
        warn, crit = minn(usr_warn, dev_warn), minn(usr_crit, dev_crit)
        warn_lower, crit_lower = max(usr_warn_lower, dev_warn_lower), max(usr_crit_lower, dev_crit_lower)

    # Use user's levels if present, otherwise the device's
    elif dlh == "usrdefault":
        if usr_warn is not None and usr_crit is not None:
            warn, crit = usr_warn, usr_crit
        else:
            warn, crit = dev_warn, dev_crit
        if usr_warn_lower is not None and usr_crit_lower is not None:
            warn_lower, crit_lower = usr_warn_lower, usr_crit_lower
        else:
            warn_lower, crit_lower = dev_warn_lower, dev_crit_lower

    # Use device's levels if present, otherwise yours
    elif dlh == "devdefault":
        if dev_warn is not None and dev_crit is None:
            warn, crit = dev_warn, dev_crit
        else:
            warn, crit = usr_warn, usr_crit

        if dev_warn_lower is not None and dev_crit_lower is not None:
            warn_lower, crit_lower = dev_warn_lower, dev_crit_lower
        else:
            warn_lower, crit_lower = usr_warn_lower, usr_crit_lower

    return warn, crit, warn_lower, crit_lower

def check_fans(reading, params, unique_name,
               dev_levels = None, dev_levels_lower = None,
               dev_status = None, dev_status_name = None):

    def check_fan_levels(speed, warn, crit, warn_lower, crit_lower):
        if crit != None and speed >= crit:
            status = 2
        elif crit_lower != None and speed < crit_lower:
            status = 2
        elif warn != None and speed >= warn:
            status = 1
        elif warn_lower != None and speed < warn_lower:
            status = 1
        else:
            status = 0
        return status

    speed = saveint(reading)

    # Convert legacy tuple params into new dict
    if params == None or params == (None, None):
        params = {}
    elif type(params) == tuple:
        params = { "levels" : params }

    # Prepare levels, dealing with user defined and device's own levels
    usr_levels = params.get("levels")
    usr_levels_lower = params.get("levels_lower")

    # Set all user levels to None. None means do not impose a level
    usr_warn, usr_crit             = usr_levels or (None, None)
    usr_warn_lower, usr_crit_lower = usr_levels_lower or (None, None)

    # Same for device levels
    dev_warn, dev_crit             = dev_levels or (None, None)
    dev_warn_lower, dev_crit_lower = dev_levels_lower or (None, None)

    # Decide which of user's and device's levels should be used according to the setting
    # "device_levels_handling". Result is four variables: {warn,crit}{,_lower}
    dlh = params.get("device_levels_handling", "usrdefault")

    warn, crit, warn_lower, crit_lower =\
        check_fans_determine_levels(dlh, usr_warn, usr_crit,
                                    usr_warn_lower, usr_crit_lower,
                                    dev_warn, dev_crit,
                                    dev_warn_lower, dev_crit_lower)

    # Now finally compute status. Hooray!
    status = check_fan_levels(speed, warn, crit, warn_lower, crit_lower)
    if dev_status is not None:
        if dlh == "best":
            status = min(status, dev_status)
        else:
            status = max(status, dev_status)

    perfdata = [ ("rpm", speed, warn, crit) ]

    # Render actual temperature, e.g. "17.8 Â°F"
    infotext = "%s rpm" % speed

    if dev_status is not None and dev_status != 0 and dev_status_name: # omit status in OK case
        infotext += ", %s" % dev_status_name

    # In case of a non-OK status output the information about the levels
    if status != 0:
        usr_levelstext       = ""
        usr_levelstext_lower = ""
        dev_levelstext       = ""
        dev_levelstext_lower = ""

        if usr_levels:
            usr_levelstext = " (warn/crit at %s/%s rpm)" % (usr_warn, usr_crit)

        if usr_levels_lower:
            usr_levelstext_lower = " (warn/crit below %s/%s rpm)" % (usr_warn_lower, usr_crit_lower)

        if dev_levels:
            dev_levelstext = " (device warn/crit at %s/%s rpm)" % (dev_warn, dev_crit)

        if dev_levels_lower:
            dev_levelstext_lower = " (device warn/crit below %s/%s rpm)" % (dev_warn_lower, dev_crit_lower)

        # Output only levels that are relevant when computing the state
        if dlh == "usr":
            infotext += usr_levelstext + usr_levelstext_lower

        elif dlh == "dev":
            infotext += dev_levelstext + dev_levelstext_lower

        elif dlh in ("best", "worst"):
            infotext += usr_levelstext + usr_levelstext_lower + dev_levelstext + dev_levelstext_lower

        elif dlh == "devdefault":
            infotext += dev_levelstext + dev_levelstext_lower
            if not dev_levels:
                infotext += usr_levelstext
            if not dev_levels_lower:
                infotext += usr_levelstext_lower

        elif dlh == "usrdefault":
            infotext += usr_levelstext + usr_levelstext_lower
            if not usr_levels:
                infotext += dev_levelstext
            if not usr_levels_lower:
                infotext += dev_levelstext_lower

    return status, infotext, perfdata
