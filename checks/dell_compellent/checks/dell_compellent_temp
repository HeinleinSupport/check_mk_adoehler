#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

factory_settings["dell_compellent_temp_default_levels"] = {
    "levels" : (50, 60),
    "device_levels_handling" : "usrdefault",
}

def inventory_dell_compellent_temp(info):
    return [ (entry[0], None) for entry
              in info if entry[0] != None]

def check_dell_compellent_temp( item, params, info):

    state_table = {
        "1" : ( "up, ", 0 ),
        "2" : ( "down, ", 2 ),
        "3" : ( "degraded", 1 ),
    }

    for descr, status, name, temp, warn, crit in info:
        if item == descr:
            dev_state_readable, dev_state = state_table[status]
            return check_temperature(savefloat(temp), params, "dell_compellent_temp_%s" %item,
                     dev_levels = (savefloat(warn), savefloat(crit)),
                     dev_status = dev_state, dev_status_name = dev_state_readable)

    return 3, "unknown"

check_info["dell_compellent_temp"] = {
    "check_function"        : check_dell_compellent_temp,
    "inventory_function"    : inventory_dell_compellent_temp,
    "service_description"   : "Ctlr-Temp %s",
    "has_perfdata"          : True,
    "snmp_info"             : ( ".1.3.6.1.4.1.16139.2.19.1", [
                                      OID_END,
                                      3, # scCtlrTempStatus
                                      4, # scCtlrTempName
                                      5, # scCtlrTempCurrentC
                                      9, # scCtlrTempWarnUprC
                                      11, # scCtlrTempCritUprC
                              ]),
    "group"                 : "temperature",
    "includes"              : [ "temperature.include" ],
    "default_levels_variable" : "dell_compellent_temp_default_levels",
    "snmp_scan_function"    : lambda oid: oid('.1.3.6.1.4.1.16139.2.3.0') == "Dell-Compellent Technologies",
}
