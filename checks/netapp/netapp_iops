#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
#.1.3.6.1.4.1.789.1.2.2.27 	.iso.org.dod.internet.private.enterprises.netapp.netapp1.sysStat.misc.misc64NfsOps		 "The total number of Server side NFS calls since the last boot. This object returns all of the 64 bit unsigned integer." 
#.1.3.6.1.4.1.789.1.2.2.28	.iso.org.dod.internet.private.enterprises.netapp.netapp1.sysStat.misc.misc64CifsOps		 "The total number of Server side CIFS calls since the last boot. This object returns all of the 64 bit unsigned integer." 
#.1.3.6.1.4.1.789.1.2.2.29	.iso.org.dod.internet.private.enterprises.netapp.netapp1.sysStat.misc.misc64HttpOps		 "The total number of HTTP operations received since the last boot. This object returns all of the 64 bit unsigned integer." 
#.1.3.6.1.4.1.789.1.17.25	.iso.org.dod.internet.private.enterprises.netapp.netapp1.blocks.fcp64Ops				 "The total number of FCP ops handled since the last boot. This object returns all of the 64 bit unsigned integer. This field is not available from the c-mode management interfaces" 
#.1.3.6.1.4.1.789.1.17.24	.iso.org.dod.internet.private.enterprises.netapp.netapp1.blocks.iscsi64Ops				 "The total number of iSCSI ops handled since the last boot. This object returns all of the 64 bit unsigned integer. This field is not available from the c-mode management interfaces"  
# ACHTUGN WARNSCHWELLEN NICHT IMPLEMENTIERT

netapp_iops_default_levels = { "read" : (None, None), "write" : (None, None)}

def check_netapp_iops(item, params, info):
    nfsops, cifsops, httpops, fcpops, iscsiops = map(int, info[0])
    this_time = int(time.time())
    timedif, avg_nfsops  = get_counter("netapp_iops.nfsops", this_time, nfsops)
    timedif, avg_cifsops  = get_counter("netapp_iops.cifsops", this_time, cifsops)
    timedif, avg_httpops  = get_counter("netapp_iops.httpops", this_time, httpops)
    timedif, avg_fcpops  = get_counter("netapp_iops.fcpops", this_time, fcpops)
    timedif, avg_iscsiops  = get_counter("netapp_iops.iscsiops", this_time, iscsiops)
	
    read_warn, read_crit = params['read']
    write_warn, write_crit = params['write']

    perfdata = [("nfsops", avg_nfsops, write_warn, write_crit ),
    		("cifsops", avg_cifsops, write_warn, write_crit ),
			("httpops", avg_httpops, write_warn, write_crit ),
			("fcpops", avg_fcpops, write_warn, write_crit ),
			("iscsiops", avg_iscsiops, write_warn, write_crit )
    	       ]
    state = 0
#    read_msg = ''
#    write_msg = ''
#    if read_warn != None and read_warn >= read:
#        state = 1
#	read_msg = ' (!)'
#    if read_crit != None and read_crit >= read:
#        state = 2
#	read_msg = ' (!!)'
#
#    if write_warn != None and write_warn >= write:
#        state = max(state, 1)
#        write_msg = ' (!)'
#    if write_crit != None and write_crit >= write:
#        state = 2
#	write_msg = ' (!!)'


    infotext = " - %s NFSOPS, %s CIFSOPS, %s HTTPOPS, %s FCPOPS, %s ISCSIOPS in last %d sec" % (nfsops,cifsops,httpops,fcpops,iscsiops,timedif)

    return(state, nagios_state_names[state] + infotext, perfdata)
    

check_info["netapp_iops"] = {
    "check_function"        : check_netapp_iops,
    "inventory_function"    : lambda info: [(None, "netapp_iops_default_levels")],
    "service_description"   : "IOPS",
    "has_perfdata"          : True,
    "group"                 : "netapp_iops",
    "snmp_scan_function"    : lambda oid: oid("1.3.6.1.2.1.1.1.0").startswith('NetApp Release'),
    "snmp_info"		    : ( ".1.3.6.1.4.1.789.1", [ "2.2.27.0","2.2.28.0","2.2.29.0","17.25.0","17.24.0"])
}

